# –û–ø–µ—Ä–∞—Ç–æ—Ä return
# –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ 
# –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é

# def summa(arg1, arg2):
#     return arg1+arg2 
#     print('Hello world')

# number = summa(2,3)
# print(number)
# –ó–∞–ø—É—Å—Ç–∏—Ç–µ, –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —á—Ç–æ –≤–µ—Ä–Ω–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è

# –†–µ–∫—É—Ä—Å–∏—è
# –≤—ã–∑–æ–≤ —Å–∞–º–æ–≥–æ —Å–µ–±—è
# def printNumber(arg1):
#     print(arg1)
#     printNumber(arg1 + 1)

# printNumber(1)

# C–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∫—É—Ä—Å–∏—é –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑—Ä–∞—Å—Ç–∞–µ—Ç
# –µ—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç —á–µ—Ç–Ω—ã–π +3
# –∏–Ω–∞—á–µ +1

# def stepen(arg1, arg2):
#     return arg1 ** arg2

# num = stepen(2,7)
# print(num)
# num2 = stepen(3,3)
# print(num2)


# —Ä–µ–∫—É—Ä—Å–∏—è
# –≤—ã–∑–æ–≤ —Å–∞–º–æ–≥–æ —Å–µ–±—è

# def generate(n, open=0, closed=0, text=''):
#     if len(text)==n*2:
#         print(text)
#         return

#     if open<n:
#         generate(n, open+1, closed, text+'üòò')
#     if closed<open:
#         generate(n, open, closed+1, text+'ü•∞')

# generate(2)

# –∞—Ä–≥—É–º–µ–Ω—Ç—ã args

# def printsArgs(*arg):
#     for i in arg:
#         print(i)

# printsArgs(2,3,4,54,6,8)

# –ó–∞–¥–∞–Ω–∏–µ
# –Ω–∞–π–¥–∏—Ç–µ —Å—É–º–º—É –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª
# c –ø–æ–º–æ—â—å—é *args

# def printsArgs(*arg):
#     sum = 0
#     for i in arg:
#         sum+=i
#     print(sum)

# printsArgs(1,4,55,2,3)


# –∞—Ä–≥—É–º–µ–Ω—Ç—ã **Kargs 

# my_dict = { 'name':'–£–º–∞—Ä'}

# def printsArgs(**arg):
   
#    for i in arg.keys():
#         print(i, '-', arg[i])
  
    
# printsArgs(student1='–£–º–∞—Ä', student2='–≠–ª–∑–∞—Ç')


# key - value
# student1 - –£–º–∞—Ä

# –õ—è–º–¥–∞ —Ñ—É–Ω–∫—Ü–∏–∏
# c–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –ø—Ä–∏–º–µ—Ä–Ω–æ –∫–∞–∫ —Ç–µ—Ä–Ω–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã, —Ç–æ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É

# def firstHelloPrint(name):
#     print(f'Hello {name}')

# firstHelloPrint('–£–º–∞—Ä')

# secondHelloPrint = lambda name: print(f'Hello {name}')

# secondHelloPrint('–£–º–∞—Ä')

# sum = lambda x,y: print(x+y)

# sum(2,2)

# C–æ–∑–¥–∞–π—Ç–µ –ª—è–º–¥–∞ —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç —Å—Ç–µ–ø–µ–Ω—å —á–∏—Å–ª–∞
# –Ω–∞–ø—Ä–∏–º–µ—Ä –¥–ª—è stepen(2,3) => 8

# sum = lambda x,y: x**y

# num = sum(2,3)
# print(num)


# –ù–∞–π–¥–∏—Ç–µ –±–æ–ª—å—à–µ–µ –∏–∑ –¥–≤—É—Ö —á–∏—Å–µ–ª —Å –ø–æ–º–æ—â—å—é –ª—è–º–¥–∞
# –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ä–Ω–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã

# –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–µ—Ç–Ω–æ–µ –ª–∏ —á–∏—Å–ª–æ —Å –ø–æ–º–æ—â—å—é –ª—è–º–¥–∞ —Ñ—É–Ω–∫—Ü–∏–π
# –∏ –≤—ã–≤–µ–¥–∏—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω –ª–∏–±–æ '—á–µ—Ç–Ω–æ–µ' –ª–∏–±–æ '–Ω–µ—á–µ—Ç–Ω–æ–µ'

# C –ø–æ–º–æ—â—å—é –ª—è–º–¥–∞ —Ñ—É–Ω–∫—Ü–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —á–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∏ –≤—ã–≤–µ–¥–∏—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω

# –° –ø–æ–º–æ—â—å—é –ª—è–º–¥–∞ —Å—Ä–∞–≤–Ω–∏—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å 'root'
# –µ—Å–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–≤–µ–¥–∏—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω '–í—Ö–æ–¥ —Ä–∞–∑—Ä–µ—à–µ–Ω'
# –∏–Ω–∞—á–µ '–í—Ö–æ–¥ –∑–∞–ø—Ä–µ—â–µ–Ω'

# –ù–∞–π–¥–∏—Ç–µ –±–æ–ª—å—à–µ–µ –∏–∑ –¥–≤—É—Ö —á–∏—Å–µ–ª —Å –ø–æ–º–æ—â—å—é –ª—è–º–¥–∞
# –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ä–Ω–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã

# –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–µ—Ç–Ω–æ–µ –ª–∏ —á–∏—Å–ª–æ —Å –ø–æ–º–æ—â—å—é –ª—è–º–¥–∞ —Ñ—É–Ω–∫—Ü–∏–π
# –∏ –≤—ã–≤–µ–¥–∏—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω –ª–∏–±–æ '—á–µ—Ç–Ω–æ–µ' –ª–∏–±–æ '–Ω–µ—á–µ—Ç–Ω–æ–µ'

# C –ø–æ–º–æ—â—å—é –ª—è–º–¥–∞ —Ñ—É–Ω–∫—Ü–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —á–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∏ –≤—ã–≤–µ–¥–∏—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω

# –° –ø–æ–º–æ—â—å—é –ª—è–º–¥–∞ —Å—Ä–∞–≤–Ω–∏—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å 'root'
# –µ—Å–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–≤–µ–¥–∏—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω '–í—Ö–æ–¥ —Ä–∞–∑—Ä–µ—à–µ–Ω'
# –∏–Ω–∞—á–µ '–í—Ö–æ–¥ –∑–∞–ø—Ä–µ—â–µ–Ω'

# –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
# '–µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –≤–µ—Ä–Ω–æ–µ' if (c—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ) else '–µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤–µ—Ä–Ω–æ–µ